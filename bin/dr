#!/bin/bash

#######################################################
# @author: dqd (formerly diqidoq)                     #
# @license: GPLv3                                     #
# @see [dr on Github](https://github.com/diqidoq/dr). #
#######################################################

# @function dr_init
# @description initializes <dr> with primary settings and command line dialog strings.
dr_init () {
  # @function s()
  # @description Set up styles for command line output in POSIX compatible way.
  # @arg $1 color names like red blue yellow
  # @example: printf "This will format %s this part of string in red." "$(s red)"
  # @exit code 1 if arg unknown
  s () (
    offset=0
    for option in "$@"; do
      code=
      case $option in
        foreground|fg) offset=0 ;;
        background|bg) offset=10 ;;
        default|normal|off|reset) code=0 ;;
        bold) code=1 ;;
        underline) code=4 ;;
        black) code=30 ;;
        red) code=31 ;;
        green) code=32 ;;
        yellow) code=33 ;;
        blue) code=34 ;;
        magenta) code=35 ;;
        cyan) code=36 ;;
        white) code=37 ;;
        *) code=error ;;
      esac
        [ -z "$code" ] && continue
        [ "$code" = error ] && {
            printf %s\\n "unknown option: $option" >&2
            exit 1
        }
        [ "$code" -ge 30 ] && code="$((code+offset))"
        printf \\033\[%sm "$code"
    done
  )

  # Check type of shell variable. Good for debugging or required conditions
  type_of_var () {
    declare -l type_signature
    type_signature=$(declare -p "$1" 2>/dev/null)

    if [[ "$type_signature" =~ "declare --" ]]; then
        printf "string"
    elif [[ "$type_signature" =~ "declare -a" ]]; then
        printf "array"
    elif [[ "$type_signature" =~ "declare -A" ]]; then
        printf "map"
    else
        printf "none"
    fi
}

  # Some repeatable strings and interaction commands.
  # NOTE: IDE warnings regarding wrong use of variable in format string in here
  # can be ignored since your IDE check does not understand that these vars hold format.
  YES_NO () { read -p " yY(es)/nN(o): " -n 1 -r ; printf "\n" ; }
  GO () { if [[ "$REPLY" =~ ^([yY][eE][sS]|[yY])$ ]] ; then ${1} ; else SKIP ; fi }
  YES_NO_GO () { read -p " yY(es)/nN(o): " -n 1 -r ; printf "\n" ; GO "${1}" ; }
  ASK () { printf "\nDo you want to %s%s%s?" "$(s green)" "${1}" "$(s off)"; }
  CONFIRM () { ASK "${1}" ; YES_NO ; }
  CONFIRM_GO () { ASK "${1}" ; YES_NO_GO "${2}" ; }
  MULTI_CHOICE () { ASK "${1}" ; read -p " (${2}): " -n 1 -r ; printf "\n" ; }
  SKIP () { printf "\nOk. %sSkipped%s for now.\n\n" "$(s yellow)" "$(s off)"; }
  ABORT () { printf "\n%sAbort script%s for now.\n\n"  "$(s yellow)" "$(s off)"; exit 1 ; }
  IN_PROGRESS () { printf "This feature is unsupported yet but in progress." ; ABORT ; }
  COMPLETED () { printf "%s\nDone!\n\n" "$(s green)" ; }
  WRONG_INPUT () { printf "\n%sWrong%s input!\n" "$(s red)" "$(s off)"; dr_help ; ABORT ; }
  STOP_ERROR () { printf "\n%sError: Stopped installation command!%s\n\n" "$(s red)" "$(s off)" ; }
  PRESS_ENTER () {
    printf "[Press %sENTER%s or %sRETURN%s to go ahead. %sPRESS %sCTRL/C%s to stop]"\
    "$(s green)" "$(s off)" "$(s green)" "$(s off)" "$(s cyan)" "$(s bold underline)" "$(s off)"
  }
  COMMAND_NOT_FOUND () {
    printf "\n %s%s%s \n %s could not be found. Is it installed?\n\n" "$(s yellow)" "${STOP_ERROR}" "$(s off)" "${1}"
  }
  ARGUMENTS_INPUT_NOTE () {
    printf "You provided %s%s%s via%s input arguments%s (not via a file). - " "$(s green)" "${ITEMS_TYPE}" "$(s off)" "$(s green)" "$(s off)"
    printf "Start parsing..."
  }
  ARGUMENTS_INPUT_SEPARATED_WARNING () {
    printf "\n%sAttention:%s Seems that you used%s comma separated multiple arguments.%s\n" "$(s yellow)" "$(s off)" "$(s yellow)" "$(s off)"
    printf "Some users use comma and/or space, some not. "
    printf "We will check and repair this."
  }
  ARGUMENTS_NOT_FOUND () {
    printf "\n\n%sArguments Count: %s0%s - %sNo arguments%s provided.\n\n" "${STOP_ERROR}" "$(s yellow)" "$(s off)" "$(s yellow)" "$(s off)"
  }
  COMPOSER_INSTALL_INFO () {
    printf "\nMake sure you have a local or global composer installed.\n"
    printf "The simplest is to follow the steps outlined here: https://getcomposer.org/download/\n"
  }
  DRUSH_INSTALL_INFO () {
    printf "\nMake sure you have a local %sDrush%s%s and a global Drush Launcher installed%s
or any other Drush detection method like recommended in the installation README of -dr-.\n" "$(s red)" "$(s off)" "$(s red)" "$(s off)"
    printf "\nIf you have Drush installed (default is -installed- when using dr to install Drupal),
and a launcher is missing, then you need to run with admin permissions:\n"
    printf "%s curl -o %s/usr/local/bin/drush \
https://raw.githubusercontent.com/tvlooy/drush-launcher/master/drush %s\n" "$(s yellow)" "$(s green)" "$(s off)"
    printf "%s chmod +x %s/usr/local/bin/drush%s\n
   ...to have drush command without vendor path available.\n" "$(s yellow)" "$(s green)" "$(s off)"
  }
  COMPOSER_JSON_NOT_FOUND () {
    printf "\nAre we in the%s proper Composer init root%s?\n" "$(s yellow)" "$(s off)"
    printf "A%s composer.json%s file does not exist here in path.\n\n%s"  "$(s green)" "$(s off)" "${STOP_ERROR}"
  }
  DRUPAL_ROOT_NOT_FOUND () {
    printf "\n%s\nAre we in a Drupal project root? A %s/*/core%s directory%s does not exist%s on \
    second level in path.\n\n" "${STOP_ERROR}" "$(s green)" "$(s off)" "$(s red)" "$(s off)"
  }
  PERMISSION_REPAIR_INFO () {
    printf "\nBased on the%s following links%s:\n" "$(s green)" "$(s off)"
    printf "https://www.drupal.org/node/244924\n"
    printf "https://bit.ly/3IZL6n1\n"
    printf "https://bit.ly/3K1WBeL\n"
    printf "https://bit.ly/3Dwimkx\n"
    printf "...I repair%s Drupal directories%s and%s file permissions%s now recursively.\n\n" "$(s green)" "$(s off)" "$(s green)" "$(s off)"
  }
  PERM_NO_OUTPUT_INFO () {
    printf "\n(NOTE: %sNo output means that there was nothing to change%s.)\n" "$(s green)" "$(s off)"
  }
  # @todo Which we can change programmatically on respective different tasks later.
  ITEMS_TYPE="extension(s)"
}

dr_help () {
  printf "\n%sHELP%s - look at these case statements to understand the <dr> commands.\n" "$(s yellow)" "$(s green)"
  echo '--------------------------------------------------------------------'
  printf "\n\n"
  declare -f dr_exec
}

dr_command_check () {
  if ! command -v "$1" &> /dev/null ; then
    COMMAND_NOT_FOUND "$1"
    return 1
  else
    return 0
  fi
}

dr_composer_check () {
  if ! dr_command_check "composer" ; then
    COMPOSER_INSTALL_INFO
    ABORT
  fi
}

dr_drush_check () {
  if ! dr_command_check "drush" ; then
    DRUSH_INSTALL_INFO
    ABORT
  fi
}

dr_drupal_root_check () {
  if [[ ! -f "composer.json" ]] ; then
    COMPOSER_JSON_NOT_FOUND ; ABORT
    # There are hundreds of variants of a Drupal directory tree structure out there,
    # but in 99% of the variants the core folder is on second level of project root.
    # 
    # So we test if we find a /core folder on second level (/*/core) 
    # No matter what the previous folder is and no matter if it is a symlink to a global core.
    # @todo check issue #2 for more checks required in future to 100% detect Drupal root.
  elif [ -z "$(find . -maxdepth 2 -type d -name core -follow)" ] ; then
    DRUPAL_ROOT_NOT_FOUND ; ABORT
  fi
}

dr_exec () {
  # Checking for leading -flag in arguments to set modus-operandi.
  case "${1}" in
  # manage extensions case group
  ##############################
    -i)
      # Install for selected Drupal modules | short link dri.
      # takes @arguments after case -switch identifier and needs @shift
      dr_drupal_root_check
      dr_composer_check
      dr_drush_check
      shift
      dr_manage_extensions drupal module install "$@"
      ;;
    -ti)
      # Install for selected Drupal themes | short link dri.
      # takes @arguments after case -switch identifier and needs @shift
      dr_drupal_root_check
      dr_composer_check
      dr_drush_check
      shift
      dr_manage_extensions drupal theme install "$@"
      ;;
    -r)
      # Uninstall & remove selected Drupal modules | short link: drr.
      # takes @arguments after case -switch identifier and needs @shift
      dr_drupal_root_check
      dr_composer_check
      dr_drush_check
      shift
      dr_manage_extensions drupal module uninstall "$@"
      ;;
    -tr)
      # Uninstall & remove selected Drupal themes | short link: drr.
      # takes @arguments after case -switch identifier and needs @shift
      dr_drupal_root_check
      dr_composer_check
      dr_drush_check
      shift
      dr_manage_extensions drupal theme uninstall "$@"
      ;;
    -c)
      # Checkout info for selected modules | short link: drc.
      # takes @arguments after case -switch identifier and needs @shift
      dr_drupal_root_check
      shift
      dr_info
      ;;
    -u)
      # Update selected modules | short link: dru.
      # takes @arguments after case -switch identifier and needs @shift
      dr_drupal_root_check
      shift
      dr_parse_input_extension_list "$@"
      dr_manage_extensions_update
      ;;
    -l)
      # list extensions filtered by argument or all | short link: drl.
      # takes @arguments after case -switch identifier and needs @shift
      dr_drupal_root_check
      dr_drush_check
      shift && dr_drush_pmlist $1
      ;;
  # project install case group
  ############################
    -dbi)
      # MySQL DB install | short link drdbi.
      dr_mysql_db_install
      ;;
    -pi)
      # Drupal project-recommended install arg: version directory | short link drpi.
      # takes @arguments after case -switch identifier and needs @shift
      dr_composer_check
      dr_drush_check
      shift && dr_project_install "$@"
      ;;
  # project management case group
  ###############################
    -s) # status overview | short link: drs.
      dr_drupal_root_check
      dr_composer_check
      dr_drush_check
      dr_status
      ;;
    -ua | -upa) # update all drupal/* -W | short link: drupa
      dr_drupal_root_check
      dr_composer_check
      dr_update_all
      ;;
    -b) # backup of directory  & database. | short link drb, drbkp.
      dr_drupal_root_check
      dr_drush_check
      dr_backup
      ;;
    -db | -dbkp) # Drupal database update | short link drdb, drdbkp.
      dr_drupal_root_check
      dr_drush_check
      dr_drush_updb
      ;;
    -prm) # repair all file permissions in project dir | short link drprm.
      dr_drupal_root_check
      dr_permission_repair      
      ;;
    -fis) # flush images styles
      dr_drush_flush_image_styles
      dr_drush_cache_clear
      ;;
    -ebi) # entity bundle info
      dr_drush_cache_clear
      dr_manage_project_get_entity_type_bundle_list $1
      ;;
    -w | -warn) # print all Drupal warning messages in project | short link drw, drwarn.
      dr_drush_check
      dr_drush_warn
      ;;
    -e | -err) # print all Drupal error messages in project | short link dre, drerr.
      dr_drush_check
      dr_drush_err
      ;;
    "" | -* | *)
      WRONG_INPUT
      ;;
  esac
}

dr_drush_cache_clear () {
  run_cache_clear () { drush cr ; }
  CONFIRM_GO "clear Drupal caches" run_cache_clear
}

dr_drush_cron_run () {
  run_cron () { drush cron ; }
  CONFIRM_GO "run Drupal cron" run_cron
}

dr_drush_flush_image_styles () {
  run_flush_images () { drush image:flush --all ; }
  CONFIRM_GO "run Drupal cron" run_flush_images
}

# @TODO needs refactoring to new function structure of <dr>
dr_drush_pmlist () {
  if [ -z "${1}" ] ; then
    CONFIRM "List all ${ITEMS_TYPE} (yes = including core, no = excluding core)" 
    if [[ "$REPLY" =~ ^([yY][eE][sS]|[yY])$ ]] ; then
      drush pml --filter="${1}"
    else
      drush pml --no-core --filter="${1}"
    fi
  fi
}

# consumes user input
# prints validates input
dr_validate_input_extension_list () {
  declare -l modifier
  declare -l input
  declare -l count_of_arg

  modifier="$1"
  shift
  count_of_arg="$#"

  if [ "$count_of_arg" -eq 0 ] ; then
    # in case of missing arguments
    printf "List the machine names of the extensions you want to %s separated by a space " "$modifier"
    printf "or provide a *.log|*.txt|*.csv file with them listed"
    read -p ": " input

    if [ -z "$input" ] ; then
      # in case of still no arguments
      ARGUMENTS_NOT_FOUND ; ABORT
    else
      echo "$input"
    fi

  else
    # in case of arguments already given
    echo "$*"
  fi
}

# @uses dr_validate_input_extension_list() to get validated user input
# prints to $input_arguments_array
dr_parse_input_extension_list () {
  declare -l input_arguments
  declare -ga input_arguments_array
  # type_of_var input_arguments_array

  input_arguments=$(dr_validate_input_extension_list "$@") > /dev/null &

  if [[ "${input_arguments}" == +(*.log|*.txt|*.csv) ]] ; then
    # read from file with extensions
    decalre -l line
    while read -r line ; do
      echo "${line}"
    done < "${input_arguments}"
  else
    # read from command line input argument list of extensions
    ARGUMENTS_INPUT_NOTE
    # To collect and fix multiple arguments input like 1, 2,3 4 5
    # so that it will be interpreted like 1 2 3 4 5 (as 5 arguments)
    # we do some string split replace and prepare an arguments array.
    if [[ $input_arguments == *","* ]] ; then
      # Let's confirm arguments repair and split on separator by the user - just in case.
      ARGUMENTS_INPUT_SEPARATED_WARNING
      repair_separator () {
        input_arguments=$(sed 's/,/, /g' <<< "$input_arguments")
        input_arguments=$(sed 's/,//g' <<< "$input_arguments")
      }
      CONFIRM_GO "go ahead" repair_separator
    fi
    # Final whitespace cleanup and conversion into Array.
    input_arguments=$(sed 's/  / /g' <<< "$input_arguments")
  fi
  # Final array parsing into whitespace separated string
  IFS=' '
  read -ra input_arguments_array <<< "$input_arguments"
  type_of_var input_arguments_array
}

# alters user input to add prefixes or suffixes
# based on scope like drupal/* vendor/*.
# prints $altered_array
dr_alter_input_extension_list () {
  declare -l altered_array
  declare -l count=0
  declare -l prefix
  declare -l suffix

  case "${1}" in
    -prepend | -p)
      shift
      prefix="${1}"
      for i in "${input_arguments_array[@]}" ; do
        altered_array[$count]="$prefix$i"
        count=$((count + 1))
      done
      ;;
    -append | -a | -s)
      shift
      suffix="${1}"
      for i in "${input_arguments_array[@]}" ; do
        altered_array[$count]="$i$suffix"
        count=$((count + 1))
      done
      ;;
  esac

echo "${altered_array[@]}"
}

dr_manage_extensions () {
  declare -l scope # drupal/vendor
  declare -l type  # theme/module
  declare -l action # install/uninstall/get-info
  scope="$1" && shift
  type="$1" && shift
  action="$1" && shift

  declare -lA composer_actions
  declare -lA drush_actions
  composer_actions["-i"]="require"
  composer_actions["-c"]="info"
  composer_actions["-u"]="update"
  composer_actions["-r"]="remove"
  drush_actions["-i"]="pm-install"
  drush_actions["-c"]="pm:list | grep"
  drush_actions["-r"]="pm-uninstall"

  dr_parse_input_extension_list "$@"
  set -e
  dr_manage_extensions_composer_routine ${composer_actions[$action]}
  dr_manage_extensions_drush_routine ${drush_actions[$action]}
  dr_drush_cache_clear
  set +e
}

dr_manage_extensions_remove () {
  set -e
  dr_manage_extensions_drush_routine pm-uninstall
  dr_manage_extensions_composer_routine remove
  dr_drush_cache_clear
  set +e
}

dr_manage_extensions_update () {
  dr_drush_cron_run
  dr_manage_extensions_composer_info_routine info
  dr_manage_extensions_composer_routine update -W
  dr_drush_updb
  dr_drush_cache_clear
}

dr_update_all () {
  MULTI_CHOICE "update [a]ll, [d]rupal only, [i]nteractive" "a/d/i"
  case "${REPLY}" in
    a)
      composer update -W
      ;;
    d)
      composer update drupal/* -W
      ;;
    i)
      composer update --interactive
      ;;
    *)
      WRONG_INPUT
      ;;
  esac
  dr_drush_updb
  dr_drush_cache_clear
}

# consumes internal argument pm-install or pm-uninstall passed via install() or remove() function
dr_manage_extensions_drush_routine () {
  declare -l items
  declare -l drush_command
  drush_command="$1"

  items=$(for i in "${input_arguments_array[@]}"; do printf " %s" "$i" ; done ;)
  drush_run () { drush $drush_command $items -y ; }
    CONFIRM_GO "$drush_command $items via Drush" drush_run
}

# Drupal specific Composer routine consuming internal argument require or remove.
dr_manage_extensions_composer_routine () {
  declare -l items
  declare -l action
  action="$1"
  items=$(dr_alter_input_extension_list -p "drupal/")
  # items=$(for i in "${input_arguments_array[@]}" ; do printf "drupal/%s " "${i}" ; done)
  composer_run () { composer $action $items $2 ; }
  CONFIRM_GO "$action $items via Composer" composer_run
}

dr_manage_extensions_composer_info_routine () {
  declare -l composer_command
  composer_command="$1"
  composer_info_run () {
    # @todo for not *sh compatible change it to i=0 while []; do
    for i in "${input_arguments_array[@]}"; do
      composer $composer_command -a drupal/"${i}" | grep -e descrip -e versions --color=auto
      printf "\n-----------------------------------\n\n"
    done
  }
  CONFIRM_GO "$composer_command information via Composer" composer_info_run
}

dr_drush_warn () {
  drush core:requirements --severity=1
}

dr_drush_err () {
  drush core:requirements --severity=2
}

dr_manage_extensions_composer_update_status () {
  composer clear-cache
  composer outdated
  composer update --dry-run
  composer status
}

dr_manage_project_drush_status () {
  dr_drush_cache_clear
  dr_drush_cron_run
  drush pm:security
  drush config:status
  dr_drush_warn
  dr_drush_err
}

dr_manage_project_get_entity_type_bundle_list () {
  drush php-eval "print_r(array_keys(\Drupal::service('entity_type.bundle.info')->getBundleInfo('$1')));"
}

dr_drush_updb () {
  exec_drush_updb () { drush updb ; }
  CONFIRM_GO "update Drupal database" exec_drush_updb
}

dr_permission_repair() {
  PERMISSION_REPAIR_INFO
  # Prepare variables like
  # base_dir, logging directory, LOGFILE and timestamp.
  #
  declare -l BASE_DIR
  declare -l TIMESTAMP
  declare -l LOG_DIR
  BASE_DIR=$(dirname "$0")
  TIMESTAMP=$(date '+%y%m%d_%H%M%S')
  LOG_DIR=permission_repair_logs
  mkdir -p ${LOG_DIR}
  declare -l LOG_FILE
  LOG_FILE=${LOG_DIR}/${TIMESTAMP}.log

  printf "\nWill %s(re)set user and group%s of%s all folders%s and%s files%s to \n" "$(s green)" "$(s off)" "$(s blue)" "$(s off)" "$(s blue)" "$(s off)"
  printf "%s:www-data first. %s" "${USER}" "${PERM_NO_OUTPUT_INFO}" ; CONFIRM
  sudo chown -c -R "${USER}":www-data web vendor | tee ${LOG_FILE}

  printf "\nCorrect%s ALL directories%s in%s web/%s to" "$(s green)" "$(s off)" "$(s blue)" "$(s off)"
  printf "%s u=rwx,g=rx,o=%s in the next step. %s" "$(s yellow)" "$(s off)" "${PERM_NO_OUTPUT_INFO}" ; CONFIRM
  find web/* -type d -exec sudo chmod -c u=rwx,g=rx,o= '{}' + | tee ${LOG_FILE}

  printf "\nCorrect%s ALL files%s in%s web/%s to%s u=rw,g=r,o=%s " "$(s green)" "$(s off)" "$(s blue)" "$(s off)" "$(s yellow)" "$(s off)"
  printf "in the next step. %s" "${PERM_NO_OUTPUT_INFO}" ; CONFIRM
  find web/* -type f -exec sudo chmod -c u=rw,g=r,o= '{}' + | tee ${LOG_FILE}
  
  # Loop through all web/sites/(*sub dirs) having another sub dir files/ in it.
  declare -l d
  for d in web/sites/*/files
  do
    printf "\nCorrect%s $d%s directory owner/group to%s www-data:your-user and rwx%s " "$(s blue)" "$(s off)" "$(s yellow)" "$(s off)"
    printf "to both in the next step. %s" "${PERM_NO_OUTPUT_INFO}" ; CONFIRM
    sudo chown -c www-data:"${USER}" "$d" | tee ${LOG_FILE}
    sudo chmod -c ug=rwx,o= "$d" | tee ${LOG_FILE}

    printf "\nCorrect%s all sub directories%s inside of%s $d%s to%s ug=rwx,o=%s " "$(s green)" "$(s off)" "$(s blue)" "$(s off)" "$(s yellow)" "$(s off)"
    printf "in the next step. %s" "${PERM_NO_OUTPUT_INFO}" ; CONFIRM
    find "$d" -type d -exec sudo chmod -c ug=rwx,o= '{}' + | tee ${LOG_FILE}

    printf "\nCorrect%s files%s inside of%s $d%s directory to%s ug=rw,o=%s " "$(s green)" "$(s off)" "$(s blue)" "$(s off)" "$(s yellow)" "$(s off)"
    printf "in the next step. %s" "${PERM_NO_OUTPUT_INFO}" ; CONFIRM
    find "$d" -type f -exec sudo chmod -c ug=rw,o= '{}' + | tee ${LOG_FILE}

    printf "\nLet's check if you have any%s suspicious php-files%s in your%s $d%s " "$(s yellow)" "$(s off)" "$(s blue)" "$(s off)"
    printf "directory. %s" "${PERM_NO_OUTPUT_INFO}" ; CONFIRM
    if [[ -n $(find "$d" -type f -name "*.php*") ]] ; then
      printf "\n%sWarning:%s found some%s php files%s!\n" "$(s red)" "$(s off)" "$(s yellow)" "$(s off)" | tee ${LOG_FILE}
    else
      printf "%sNo suspicious php files found.%s\n" "$(s green)" "$(s off)" | tee ${LOG_FILE}
    fi
  done

  printf "\nNow let's%s correct permissions%s of the%s settings file%s and any%s htaccess files%s " "$(s green)" "$(s off)" "$(s blue)" "$(s off)" "$(s yellow)" "$(s off)"
  printf "in the next step. %s" "${PERM_NO_OUTPUT_INFO}" ; CONFIRM
  find . -type f -name ".htaccess" -exec sudo chmod -c 440 '{}' + | tee ${LOG_FILE}
  chmod -v 440 web/sites/*/settings.php | tee ${LOG_FILE}

  ls -ahl ${LOG_DIR}
}

dr_status () {
  dr_manage_extensions_composer_update_status
  dr_manage_project_drush_status
}

dr_prepare_backup () {
  declare -g bkp_timestamp
  declare -g bkp_path
  bkp_timestamp=$(date '+%y%m%d_%H%M%S')
  bkp_path="../${PWD##*/}_bkp"
  read -p "Type your absolute backup path including target dir (f.e. /var/www/.../mybkp) Leave empty for default: ${bkp_path} "
  [ ! -z "${REPLY// }" ] && bkp_path="${REPLY}"
  mkdir -p "${bkp_path}"
}

dr_backup () {
  set -e
  set -x
  dr_drush_cache_clear
  dr_prepare_backup
  MULTI_CHOICE "backup all (a - default), database only (d), or files only (f)?" "a|d|f"
  if [ "${REPLY}" == "f" ] ; then
    dr_backup_files
  elif [ "${REPLY}" == "d" ] ; then
    dr_backup_database
  else
    dr_drush_flush_image_styles
    dr_backup_files
    dr_backup_database
  fi
  printf "Backup finished. Backup-Folder overview:\n %s" "$(ls -lh ${bkp_path})"
  set +e
  set +x
}
 
dr_backup_files () {
  dr_permission_repair
  sudo tar cvfz "${bkp_path}"/"${bkp_timestamp}".tar.gz ./ >"${bkp_path}"/"${bkp_timestamp}.log" 2>&1
}

dr_backup_database () {
  drush sql:dump > ${bkp_path}/${bkp_timestamp}.sql
  tar cvfz "${bkp_path}"/"${bkp_timestamp}_sql.tar.gz" "${bkp_path}"/"${bkp_timestamp}.sql"
  rm "${bkp_path}"/"${bkp_timestamp}.sql"
}

dr_mysql_db_install () {
  set -e
  read -p "dbadmin:" dbadmin
  read -p "dbadminpw:" dbadminpw
  read -p "db:" db;
  read -p "dbuser:" dbuser
  printf "Generate a list of passwords with pwgen (if not installed: apt-get install pwgen) and copy one for next step.\n\n"
  pwgen 23
  read -p "dbuserpw:" dbuserpw
  printf "\n\nKeep the previous login data for the user and the new database copied somewhere in case you install Drupal in the next step."
  printf "Sadly there is no way yet to hand over this db user and password to Drush while site install.\n\n"
  mysql -u ${dbadmin} -p${dbadminpw} -e "CREATE database ${db}; \
  CREATE USER IF NOT EXISTS '${dbuser}'@'localhost' IDENTIFIED BY '${dbuserpw}'; \
  GRANT ALL PRIVILEGES ON ${db}.* TO '${dbuser}'@'localhost' WITH GRANT OPTION; FLUSH PRIVILEGES;"
  set +e
}

dr_project_install () {
  declare -l pi_timestamp
  declare -l drupal_version
  declare -l drupal_install_dir
  drupal_version="$1"
  drupal_install_dir="$2"
  pi_timestamp=$(date '+%y%m%d_%H%M%S')

  if [ -z "${drupal_install_dir}" ] ; then
    # we have only 1 or 0 arguments | install dir is unknown yet.
    drupal_install_dir="drupal_${pi_timestamp}"
    read -p "Choose a name for install directory (leave empty for default ${drupal_install_dir}): " drupal_install_dir
    if [ -z "${drupal_version}" ] ; then
      # we definitely have no arguments since $1 is missing too.
      drupal_version=""
      read -p "Choose a Drupal version 9/10/11 (leave empty for default latest-stable): " drupal_version
    fi
  fi

  set -e
  set -x
  composer create-project drupal/recommended-project${drupal_version} ${drupal_install_dir}
  cd ${drupal_install_dir}
  ls -ahL
  composer require drush/drush
  mkdir web/sites/default/files
  dr_mysql_db_install
  drush si --db-su=$dbadmin --db-su-pw=$dbadminpw
  set +e
  set +x
}

# final init and run.
dr_init
dr_exec "$@"

COMPLETED && exit 0
